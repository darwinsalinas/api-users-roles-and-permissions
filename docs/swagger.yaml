openapi: 3.0.3
info:
  title: API de Usuarios Roles y Permisos 1.0
  description: |-
    Con esta API podrás crear usuarios, roles y permisos y al mismo tiempo podrás asociar los roles a los usuarios, también podrás asociarle permisos de forma directa.
  contact:
    email: salinash2000@gmail.com
  license:
    name: MIT
    url: https://mit-license.org/
  version: 1.0.0
servers:
  - url: http://127.0.0.1:8000/api
tags:
  - name: Auth
    description: Application auth
  - name: Users
    description: Application users
  - name: Roles
    description: Roles that can be assigned to the users
  - name: Permissions
    description: Permissions that can be assigned to the users and roles
paths:
  /users:
    get:
      tags:
        - Users
      summary: List users
      description: This can only be done by the logged in user.
      responses:
        default:
          $ref: '#/components/responses/UserList'
      security:
        - bearerAuth: []
    post:
      tags:
        - Users
      summary: Create user
      description: This can only be done by the logged in user.
      requestBody:
        $ref: '#/components/requestBodies/CreateUserBody'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - bearerAuth: []
  /users/{user}:
    get:
      tags:
        - Users
      summary: Get user by user id
      description: ''
      parameters:
        - name: user
          in: path
          description: 'The id that needs to be fetched. Use 1 for testing. '
          required: true
          schema:
            type: number
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '400':
          description: Invalid user id supplied
        '404':
          description: User not found
      security:
        - bearerAuth: []
    put:
      tags:
        - Users
      summary: Update user
      description: This can only be done by the logged in user.
      parameters:
        - name: user
          in: path
          description: user id that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/CreateUserBody'
      responses:
        default:
          description: successful operation
      security:
        - bearerAuth: []
    delete:
      tags:
        - Users
      summary: Delete user
      description: This can only be done by the logged in user.
      parameters:
        - name: user
          in: path
          description: The user id that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - bearerAuth: []

  /users/{user}/roles:
    delete:
      tags:
        - Users
      summary: Delete roles attached to the user
      description: This can only be done by the logged in user.
      requestBody:
        $ref: '#/components/requestBodies/UserRolesBody'
      parameters:
        - name: user
          in: path
          description: The user id
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/RoleListWithoutPagination'
        '404':
          description: User not found
      security:
        - bearerAuth: []
    patch:
      tags:
        - Users
      summary: Update roles attached to the user
      description: This action remove all roles and attach passed roles to the user
      requestBody:
        $ref: '#/components/requestBodies/UserRolesBody'
      parameters:
        - name: user
          in: path
          description: The user id
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/RoleListWithoutPagination'
        '404':
          description: User not found
      security:
        - bearerAuth: []
    
    post:
      tags:
        - Users
      summary: Attach another role to the user
      description: Attach passed roles to the user
      requestBody:
        $ref: '#/components/requestBodies/UserRolesBody'
      parameters:
        - name: user
          in: path
          description: The user id
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/RoleListWithoutPagination'
        '404':
          description: User not found
      security:
        - bearerAuth: []

  /users/{user}/permissions:
    delete:
      tags:
        - Users
      summary: Delete permissions attached to the user
      description: This can only be done by the logged in user.
      requestBody:
        $ref: '#/components/requestBodies/UserPermissionsBody'
      parameters:
        - name: user
          in: path
          description: The user id
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/PermissionListWithoutPagination'
        '404':
          description: User not found
      security:
        - bearerAuth: []
    patch:
      tags:
        - Users
      summary: Update permissions attached to the user
      description: This action remove all permissions and attach passed roles to the user
      requestBody:
        $ref: '#/components/requestBodies/UserPermissionsBody'
      parameters:
        - name: user
          in: path
          description: The user id
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/PermissionListWithoutPagination'
        '404':
          description: User not found
      security:
        - bearerAuth: []
    
    post:
      tags:
        - Users
      summary: Attach another role to the user
      description: attach passed roles to the user
      requestBody:
        $ref: '#/components/requestBodies/UserPermissionsBody'
      parameters:
        - name: user
          in: path
          description: The user id
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/PermissionListWithoutPagination'
        '404':
          description: User not found
      security:
        - bearerAuth: []

  /roles:
    get:
      tags:
        - Roles
      summary: List roles
      description: This can only be done by the logged in user.
      responses:
        default:
          $ref: '#/components/responses/RoleList'
      security:
        - bearerAuth: []
    post:
      tags:
        - Roles
      summary: Create role
      description: This can only be done by the logged in user.
      requestBody:
        $ref: '#/components/requestBodies/CreateRoleBody'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
      security:
        - bearerAuth: []
  /roles/{role}:
    get:
      tags:
        - Roles
      summary: Get role by role id
      description: ''
      parameters:
        - name: role
          in: path
          description: 'The id that needs to be fetched. Use 1 for testing. '
          required: true
          schema:
            type: number
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Invalid role id supplied
        '404':
          description: Role not found
      security:
        - bearerAuth: []
    put:
      tags:
        - Roles
      summary: Update role
      description: This can only be done by the logged in user.
      parameters:
        - name: role
          in: path
          description: role id that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/CreateRoleBody'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Roles
      summary: Delete role
      description: This can only be done by the logged in user.
      parameters:
        - name: role
          in: path
          description: The role id that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
        '400':
          description: Invalid id supplied
        '404':
          description: Role not found
      security:
        - bearerAuth: []
  /permissions:
    get:
      tags:
        - Permissions
      summary: List permissions
      description: This can only be done by the logged in user.
      responses:
        default:
          $ref: '#/components/responses/PermissionList'
      security:
        - bearerAuth: []
    post:
      tags:
        - Permissions
      summary: Create permission
      description: This can only be done by the logged in user.
      requestBody:
        $ref: '#/components/requestBodies/CreatePermissionBody'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
      security:
        - bearerAuth: []
  /permissions/{permission}:
    get:
      tags:
        - Permissions
      summary: Get permission by permission id
      description: ''
      parameters:
        - name: permission
          in: path
          description: 'The id that needs to be fetched.'
          required: true
          schema:
            type: number
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        '400':
          description: Invalid id supplied
        '404':
          description: Permission not found
      security:
        - bearerAuth: []
    put:
      tags:
        - Permissions
      summary: Update permission
      description: This can only be done by the logged in user.
      parameters:
        - name: permission
          in: path
          description: Permission id that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/CreatePermissionBody'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Permissions
      summary: Delete permission
      description: This can only be done by the logged in user.
      parameters:
        - name: permission
          in: path
          description: The id that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
        '400':
          description: Invalid id supplied
        '404':
          description: Permission not found
      security:
        - bearerAuth: []



  
  /login:
    post:
      tags:
        - Auth
      summary: Logs user into the system
      requestBody:
        $ref: '#/components/requestBodies/LoginBody'
      responses:
        '200':
          $ref: '#/components/responses/LoggedInUser'
        '401':
          description: Unauthorized
  /logout:
    post:
      tags:
        - Auth
      summary: Logs out current logged in user session
      parameters: []
      responses:
        default:
          description: successful operation
      security:
        - bearerAuth: []
  /me:
    get:
      tags:
        - Auth
      summary: Get authenticated user
      description: ''
      responses:
        default:
          $ref: '#/components/responses/CurrentUser'
      security:
        - bearerAuth: []
components:
  schemas:
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        name:
          type: string
          example: super-admin
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
    Permission:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100001
        name:
          type: string
          example: edit-articles
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Juan Pablo Martínez Rojas
        email:
          type: string
          example: juanpablo@email.com
        password:
          type: string
          example: '12345678'
        date_of_birth:
          type: string
          example: '2010-01-01'
        gender:
          type: string
          enum:
            - male
            - female
          example: 'male'
        dni:
          type: string
          example: '123454-342342-3423FJK'
        address:
          type: string
          example: 'Calle 1, Granada'
        country:
          type: string
          example: 'España'
        phone_number:
          type: string
          example: '+54 99441223443'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
    LoggedInUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Juan Pablo Martínez Rojas
        email:
          type: string
          example: juanpablo@email.com
        token:
          type: string
          example: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL2xvZ2luIiwiaWF0IjoxNjczNTQyMzQyLCJleHAiOjE2NzM1NDU5NDIsIm5iZiI6MTY3MzU0MjM0MiwianRpIjoiUHlwbGN0dThqaUFoZEgxWCIsInN1YiI6IjEiLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.TsbXQ1u0hInZ15_-mN7YdUfTskiIxrNlLw7f6lPgzlY'
    CurrentUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Juan Pablo Martínez Rojas
        email:
          type: string
          example: juanpablo@email.com
    Links: 
      type: object
      properties: 
        first: 
          type: string
        last: 
          type: string
        prev: 
          type: string
          format: nullable
        next: 
          type: string
          format: nullable
    Meta: 
      type: object
      properties: 
        current_page: 
          type: integer
          format: int32
        from: 
          type: integer
          format: int32
        last_page: 
          type: integer
          format: int32
        links: 
          type: array
          items: 
            type: object
            properties: 
              url: 
                type: string
                format: nullable
              label: 
                type: string
              active: 
                type: boolean
        path: 
          type: string
        per_page: 
          type: integer
          format: int32
        to: 
          type: integer
          format: int32
        total: 
          type: integer
          format: int32
  responses:
    LoggedInUser:
      description: Usuario logueado
      content: 
        application/json:
          schema: 
            type: object
            properties: 
              data:
                $ref: '#/components/schemas/LoggedInUser'
    CurrentUser:
      description: Usuario
      content: 
        application/json:
          schema: 
            type: object
            properties: 
              data:
                $ref: '#/components/schemas/CurrentUser'
    UserList:
      description: Lista de usuarios
      content: 
        application/json:
          schema: 
            type: object
            properties: 
              data:
                type: array
                items: 
                  $ref: '#/components/schemas/User'
              links: 
                $ref: '#/components/schemas/Links'
              meta: 
                $ref: '#/components/schemas/Meta'
    RoleList:
      description: Lista de roles
      content: 
        application/json:
          schema: 
            type: object
            properties: 
              data:
                type: array
                items: 
                  $ref: '#/components/schemas/Role'
              links: 
                $ref: '#/components/schemas/Links'
              meta: 
                $ref: '#/components/schemas/Meta'
    RoleListWithoutPagination:
      description: Lista de roles
      content: 
        application/json:
          schema: 
            type: object
            properties: 
              data:
                type: array
                items: 
                  $ref: '#/components/schemas/Role'
    PermissionList:
      description: Lista de permisos
      content: 
        application/json:
          schema: 
            type: object
            properties: 
              data:
                type: array
                items: 
                  $ref: '#/components/schemas/Permission'
              links: 
                $ref: '#/components/schemas/Links'
              meta: 
                $ref: '#/components/schemas/Meta'
    PermissionListWithoutPagination:
      description: Lista de permisos
      content: 
        application/json:
          schema: 
            type: object
            properties: 
              data:
                type: array
                items: 
                  $ref: '#/components/schemas/Permission'
    
  requestBodies:
    UserRolesBody:
      description: User roles
      content:
        application/json:
          schema:
            type: object
            properties:
              roles:
                type: array
                items:
                  type: string
                  example: 
                    - "super-admin"
    UserPermissionsBody:
      description: User permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              permissions:
                type: array
                items:
                  type: string
                  example: 
                    - "edit-articles"
    LoginBody:
      description: User credentials
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                example: salinash2000@gmail.com
              password:
                type: string
                example: 12345678
    CreateRoleBody:
      description: Role data to store in database
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: super-admin
    CreatePermissionBody:
      description: Permission data to store in database
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: publish-articles
    CreateUserBody:
      description: User data to store in database
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
                format: int64
                example: 10
              name:
                type: string
                example: Juan Pablo Martínez Rojas
              email:
                type: string
                example: juanpablo@email.com
              password:
                type: string
                example: '12345678'
              date_of_birth:
                type: string
                example: '2010-01-01'
              gender:
                type: string
                enum:
                  - male
                  - female
                example: 'male'
              dni:
                type: string
                example: '123454-342342-3423FJK'
              address:
                type: string
                example: 'Calle 1, Granada'
              country:
                type: string
                example: 'España'
              phone_number:
                type: string
                example: '+54 99441223443'
              roles:
                type: array
                items:
                  type: string
                  example: 
                    - admin
                    - editor
              permissions:
                type: array
                items:
                  type: string
                  example: 
                    - upload file
                    - publish articles
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: [] 